// <auto-generated />
using System;
using HotCatCafe.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotCatCafe.DAL.Migrations
{
    [DbContext(typeof(HotCatCafeContext))]
    partial class HotCatCafeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cd9ab24-14ef-30c0-a18d-c29caf83ab01"),
                            AccessFailedCount = 0,
                            Address = "4109 Fiona Drive, Bergstromstad, Belize",
                            BirthDate = new DateTime(1979, 3, 12, 15, 49, 19, 953, DateTimeKind.Local).AddTicks(7659),
                            ConcurrencyStamp = "9398fcad-35f1-45c2-a514-57a6fb43e154",
                            Email = "gunnar192@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "u5PtYS6s",
                            PhoneNumber = "(360) 203-5596 x08032",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Payton_Metz16"
                        },
                        new
                        {
                            Id = new Guid("6f195fc3-0fb3-7234-1071-13718484c042"),
                            AccessFailedCount = 0,
                            Address = "5558 Kulas Lights, New Joelleberg, Serbia",
                            BirthDate = new DateTime(1995, 4, 5, 5, 0, 54, 170, DateTimeKind.Local).AddTicks(9478),
                            ConcurrencyStamp = "ceaa40a8-158d-4627-8329-0b9ed2eb572e",
                            Email = "rickie.cruickshank96_welch35@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "eFGCUPHw",
                            PhoneNumber = "468-219-3758 x966",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Vesta_Mueller"
                        },
                        new
                        {
                            Id = new Guid("d183a5ce-ab17-b85c-56d7-12cacc56a65f"),
                            AccessFailedCount = 0,
                            Address = "8472 Walter Roads, Reillymouth, Moldova",
                            BirthDate = new DateTime(1981, 7, 6, 3, 32, 27, 372, DateTimeKind.Local).AddTicks(9769),
                            ConcurrencyStamp = "8c164900-98b0-4505-a61d-1ad96537381a",
                            Email = "marjorie5585@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "Ca0UWvf8",
                            PhoneNumber = "385.906.2044",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Dallin26"
                        },
                        new
                        {
                            Id = new Guid("748c12ba-a589-37a0-6570-c917347aa047"),
                            AccessFailedCount = 0,
                            Address = "578 Aurore Port, Osinskishire, French Guiana",
                            BirthDate = new DateTime(1984, 3, 12, 10, 35, 30, 489, DateTimeKind.Local).AddTicks(5897),
                            ConcurrencyStamp = "0fc862d7-449d-46a2-a47d-be017742a0bf",
                            Email = "johnny_prosacco30.boehm25@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "yg8MVUUg",
                            PhoneNumber = "(496) 556-8497 x521",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Arielle21"
                        },
                        new
                        {
                            Id = new Guid("976a148f-f8e0-3a10-889b-e13887e89a9a"),
                            AccessFailedCount = 0,
                            Address = "463 Dickinson Streets, Alexandraport, Guyana",
                            BirthDate = new DateTime(1990, 7, 27, 3, 3, 3, 702, DateTimeKind.Local).AddTicks(2183),
                            ConcurrencyStamp = "f77f3993-1d18-45b3-88d0-e0a99beeba7f",
                            Email = "tierra.schaefer.swift61@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "gpRsjH7D",
                            PhoneNumber = "320.796.5016 x563",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Joelle.Corwin"
                        },
                        new
                        {
                            Id = new Guid("af628ae5-a9b6-756a-50de-0d3133428a90"),
                            AccessFailedCount = 0,
                            Address = "18420 Lenny Field, Lake Toyberg, Republic of Korea",
                            BirthDate = new DateTime(2003, 7, 16, 4, 18, 33, 314, DateTimeKind.Local).AddTicks(6630),
                            ConcurrencyStamp = "2ba47660-62fc-4bed-b299-113fd6c1d575",
                            Email = "ısaias_yost94@gmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "XszhXZAq",
                            PhoneNumber = "974-365-1365 x521",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Zella.Leffler41"
                        },
                        new
                        {
                            Id = new Guid("86194ab9-19e1-5d85-81a0-d7dbb9179934"),
                            AccessFailedCount = 0,
                            Address = "5190 Murazik Knolls, Port Madyson, Malta",
                            BirthDate = new DateTime(2002, 6, 19, 9, 3, 33, 873, DateTimeKind.Local).AddTicks(6445),
                            ConcurrencyStamp = "60c906aa-9fd4-4db7-bd6b-48c3a0761585",
                            Email = "ısmael_runolfsson19@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "2XbAc_vH",
                            PhoneNumber = "1-417-654-0503 x51056",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Morton_Hauck65"
                        },
                        new
                        {
                            Id = new Guid("6b1cada8-49cf-92a6-1562-bdae6627bc77"),
                            AccessFailedCount = 0,
                            Address = "22728 Powlowski Lock, Harveyport, Belarus",
                            BirthDate = new DateTime(1990, 1, 1, 12, 21, 35, 748, DateTimeKind.Local).AddTicks(2422),
                            ConcurrencyStamp = "0784e627-2ee3-4e7a-a008-10ec380d6f62",
                            Email = "ıva.casper62@gmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "X8YAKGbb",
                            PhoneNumber = "1-510-723-1505",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Claudine.Hilll52"
                        },
                        new
                        {
                            Id = new Guid("703d1c77-273d-4026-26ce-0166120333b5"),
                            AccessFailedCount = 0,
                            Address = "3427 Fisher Place, Lindseyview, Madagascar",
                            BirthDate = new DateTime(2002, 12, 19, 8, 37, 14, 52, DateTimeKind.Local).AddTicks(6028),
                            ConcurrencyStamp = "3f89e72b-bda5-4a53-96b0-3a3acbb5101b",
                            Email = "sydnee.bartoletti90.aufderhar12@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "1SjNcIwH",
                            PhoneNumber = "289-506-8046",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Etha.Murazik"
                        },
                        new
                        {
                            Id = new Guid("02235ab6-faa5-7486-0986-9dce3d5e8edc"),
                            AccessFailedCount = 0,
                            Address = "708 Zena Bypass, New Stacy, Malaysia",
                            BirthDate = new DateTime(2004, 12, 21, 2, 42, 12, 995, DateTimeKind.Local).AddTicks(9401),
                            ConcurrencyStamp = "9fa2742b-17ee-47c7-be77-02e198c7da89",
                            Email = "virgie69_harber68@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "dG606uU9",
                            PhoneNumber = "579.561.3729 x773",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Maya.Graham"
                        },
                        new
                        {
                            Id = new Guid("0b606032-a3aa-3c97-011a-60ce9e42cac4"),
                            AccessFailedCount = 0,
                            Address = "91900 Tyler Shoal, South Lonzo, Central African Republic",
                            BirthDate = new DateTime(2006, 5, 22, 5, 50, 31, 97, DateTimeKind.Local).AddTicks(9348),
                            ConcurrencyStamp = "6a1d961a-c74f-42ed-b9ad-136cf383459b",
                            Email = "titus_hoppe94.schowalter93@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "PvL9XMUf",
                            PhoneNumber = "1-345-525-7432 x6688",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Hobart_Schuppe"
                        },
                        new
                        {
                            Id = new Guid("6093ca50-3e68-0ea0-93e4-c7a7eb94e93a"),
                            AccessFailedCount = 0,
                            Address = "4617 Goyette Fords, South Jennifer, Honduras",
                            BirthDate = new DateTime(1981, 9, 17, 20, 6, 39, 630, DateTimeKind.Local).AddTicks(9974),
                            ConcurrencyStamp = "587f911d-fcda-4627-bd8f-7551bf8a519a",
                            Email = "tommie80_hermiston@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "RRGmQqpB",
                            PhoneNumber = "916.893.1039 x4108",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Cathrine19"
                        },
                        new
                        {
                            Id = new Guid("58b49fed-8372-f476-401f-52a0c5bf51bc"),
                            AccessFailedCount = 0,
                            Address = "426 Tyra Land, Rosendoborough, Uganda",
                            BirthDate = new DateTime(1995, 4, 6, 17, 45, 36, 602, DateTimeKind.Local).AddTicks(9198),
                            ConcurrencyStamp = "f81a67c0-843a-45ff-94bd-2226aa430be1",
                            Email = "kiara_howell2539@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "f5HwMu8S",
                            PhoneNumber = "334.685.1007",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Gussie_Corwin"
                        },
                        new
                        {
                            Id = new Guid("ce64f326-4772-57fc-30a5-7f9df98fb50b"),
                            AccessFailedCount = 0,
                            Address = "9275 Keyon Brook, West Aurelio, Reunion",
                            BirthDate = new DateTime(2004, 11, 7, 17, 33, 14, 436, DateTimeKind.Local).AddTicks(8251),
                            ConcurrencyStamp = "587a071f-934d-4416-88c9-40b0bd252c93",
                            Email = "monserrat66.stehr@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "Mcd3tsXW",
                            PhoneNumber = "909-300-0905 x43506",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kyle_Sawayn"
                        },
                        new
                        {
                            Id = new Guid("79a0fb10-dd26-e7d8-3318-0ed281e569f1"),
                            AccessFailedCount = 0,
                            Address = "58034 Tillman Corners, Lake Alleneberg, Cote d'Ivoire",
                            BirthDate = new DateTime(1997, 5, 15, 6, 52, 40, 922, DateTimeKind.Local).AddTicks(7833),
                            ConcurrencyStamp = "bc996e26-5721-49bb-93c6-5f3753ab6ba3",
                            Email = "baby_parisian52.mitchell@gmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "1qXDNvq6",
                            PhoneNumber = "(791) 433-0090 x66056",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Morton13"
                        },
                        new
                        {
                            Id = new Guid("4aaefad9-2458-e80b-b20f-03f471b47e94"),
                            AccessFailedCount = 0,
                            Address = "7226 Fay Causeway, Lake Kyla, Senegal",
                            BirthDate = new DateTime(1988, 5, 17, 7, 3, 59, 515, DateTimeKind.Local).AddTicks(862),
                            ConcurrencyStamp = "a78b2dc7-a630-4bdd-b992-735581b242bd",
                            Email = "camden22.goodwin@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "bnzZ4Fi3",
                            PhoneNumber = "896-682-8362 x925",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nadia.Muller51"
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Coffees",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2091),
                            CreatedIpAddress = 2,
                            Description = "Various types of coffee.",
                            IsActive = true,
                            MasterId = new Guid("21e3f335-1aba-4ba1-b674-2492481ac664"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Desserts",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2229),
                            CreatedIpAddress = 2,
                            Description = "Sweet treats and desserts.",
                            IsActive = true,
                            MasterId = new Guid("7caf9f05-9cfa-42d3-9397-add14786abdc"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Teas",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2233),
                            CreatedIpAddress = 2,
                            Description = "Different types of tea.",
                            IsActive = true,
                            MasterId = new Guid("4b397609-f121-4711-8575-f7ea8791a449"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Sandwiches",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2236),
                            CreatedIpAddress = 2,
                            Description = "Assorted sandwiches.",
                            IsActive = true,
                            MasterId = new Guid("c8cce6d5-e4fe-467c-86aa-efce186932d0"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2238),
                            CreatedIpAddress = 2,
                            Description = "Fresh and healthy salads.",
                            IsActive = true,
                            MasterId = new Guid("782a9607-447d-4332-adf9-8c30da3c3dfc"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Snacks",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2241),
                            CreatedIpAddress = 2,
                            Description = "Light snacks and nibbles.",
                            IsActive = true,
                            MasterId = new Guid("ac604de4-237a-4875-8287-23d18c44d19b"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Fruit Juices",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2243),
                            CreatedIpAddress = 2,
                            Description = "Refreshing fruit juices.",
                            IsActive = true,
                            MasterId = new Guid("1cb96695-84a7-4713-b163-015cb0fff32d"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Cakes",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2245),
                            CreatedIpAddress = 2,
                            Description = "Varieties of cakes.",
                            IsActive = true,
                            MasterId = new Guid("d904b62e-a300-41df-acb6-b96faf13091b"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Ice Creams",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2256),
                            CreatedIpAddress = 2,
                            Description = "Various ice cream flavors.",
                            IsActive = true,
                            MasterId = new Guid("0527feb3-7d9c-4906-bc13-5813c163e7f8"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(2295),
                            CreatedIpAddress = 2,
                            Description = "Different types of chocolates.",
                            IsActive = true,
                            MasterId = new Guid("380fec55-4795-4104-ad92-61c8e77d8173"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DiscountID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 858, DateTimeKind.Local).AddTicks(3534),
                            CreatedIpAddress = 2,
                            IsActive = true,
                            MasterId = new Guid("7128f0e1-3b9b-4170-8b76-3187f3d3355d"),
                            OrderDate = new DateTime(2024, 8, 2, 16, 36, 7, 858, DateTimeKind.Local).AddTicks(3599),
                            Status = 0,
                            TotalAmount = 100.00m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Discontinued")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4842),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "espresso.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("90f29880-138e-43d1-95ee-71f2f236353e"),
                            Price = 2.49m,
                            ProductName = "Espresso",
                            Status = 0,
                            Stock = 50,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4896),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.15m,
                            ImagePath = "latte.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("6680b7a1-659f-4cb8-b9fe-ff0d142fce5a"),
                            Price = 3.49m,
                            ProductName = "Latte",
                            Status = 0,
                            Stock = 30,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4900),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.2m,
                            ImagePath = "cheesecake.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("5fed0a1a-2f87-4872-9974-4c2c34d898d4"),
                            Price = 4.99m,
                            ProductName = "Cheesecake",
                            Status = 0,
                            Stock = 20,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4903),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "brownie.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("3590de36-4b03-4696-be5f-042f7ff8b908"),
                            Price = 3.99m,
                            ProductName = "Brownie",
                            Status = 0,
                            Stock = 25,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4906),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.05m,
                            ImagePath = "greentea.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("ac613aa4-c690-418b-915e-9ea7db62b48b"),
                            Price = 2.99m,
                            ProductName = "Green Tea",
                            Status = 0,
                            Stock = 40,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4908),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "blacktea.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("1921a093-fe4a-436c-bd80-7fccf48d2023"),
                            Price = 2.49m,
                            ProductName = "Black Tea",
                            Status = 0,
                            Stock = 45,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryId = 4,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4916),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "turkeysandwich.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("0341acc6-1cfa-4fa3-876e-b06e46a4c467"),
                            Price = 5.49m,
                            ProductName = "Turkey Sandwich",
                            Status = 0,
                            Stock = 35,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryId = 4,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4920),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.2m,
                            ImagePath = "veggiesandwich.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("169dc546-fcb0-4c1b-bcb4-ad1c9b8ac40e"),
                            Price = 4.99m,
                            ProductName = "Veggie Sandwich",
                            Status = 0,
                            Stock = 50,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryId = 5,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4923),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.15m,
                            ImagePath = "caesarsalad.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("1450017c-94d3-4a26-b7f7-177ceeb7e7e8"),
                            Price = 6.99m,
                            ProductName = "Caesar Salad",
                            Status = 0,
                            Stock = 15,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryId = 5,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4929),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "greeksalad.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("3815b91c-3b15-4023-91e1-de79bfc7fe70"),
                            Price = 5.99m,
                            ProductName = "Greek Salad",
                            Status = 0,
                            Stock = 20,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            CategoryId = 6,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4931),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.05m,
                            ImagePath = "chips.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("e22673ec-89f1-45dd-a687-6b515893e0e9"),
                            Price = 1.99m,
                            ProductName = "Chips",
                            Status = 0,
                            Stock = 60,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryId = 6,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4934),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "pretzels.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("6480a8f5-16a7-4680-8eb2-aa9e598e259a"),
                            Price = 2.49m,
                            ProductName = "Pretzels",
                            Status = 0,
                            Stock = 70,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4937),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "orangejuice.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("b4baeceb-9ec0-4649-8c17-f686e3bee8e5"),
                            Price = 3.29m,
                            ProductName = "Orange Juice",
                            Status = 0,
                            Stock = 50,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4940),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.05m,
                            ImagePath = "applejuice.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("086e5839-302c-4a9a-bec1-9440c25632c3"),
                            Price = 2.99m,
                            ProductName = "Apple Juice",
                            Status = 0,
                            Stock = 45,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryId = 8,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4944),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.2m,
                            ImagePath = "chocolatecake.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("6b1f2cf3-6560-4401-b242-9dc76c76f8f7"),
                            Price = 6.49m,
                            ProductName = "Chocolate Cake",
                            Status = 0,
                            Stock = 10,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 16,
                            CategoryId = 8,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4947),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.15m,
                            ImagePath = "vanillacake.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("aacfe4c2-1346-4318-93ca-856f56442495"),
                            Price = 5.99m,
                            ProductName = "Vanilla Cake",
                            Status = 0,
                            Stock = 15,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 17,
                            CategoryId = 9,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4950),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "vanillaicecream.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("ad631006-f60a-4c4a-97d9-539c134c43f4"),
                            Price = 4.49m,
                            ProductName = "Vanilla Ice Cream",
                            Status = 0,
                            Stock = 25,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 18,
                            CategoryId = 9,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4953),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "chocolateicecream.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("984154e7-f7d7-4054-bd7a-6c12a5853f58"),
                            Price = 4.99m,
                            ProductName = "Chocolate Ice Cream",
                            Status = 0,
                            Stock = 20,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 19,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4957),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.05m,
                            ImagePath = "darkchocolate.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("725fc037-7a63-48e9-996a-825f541f5faf"),
                            Price = 2.99m,
                            ProductName = "Dark Chocolate",
                            Status = 0,
                            Stock = 30,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 20,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 8, 2, 16, 36, 7, 854, DateTimeKind.Local).AddTicks(4992),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.1m,
                            ImagePath = "milkchocolate.jpg",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("eea7df5f-273c-45c2-a028-61b43b9d6732"),
                            Price = 2.49m,
                            ProductName = "Milk Chocolate",
                            Status = 0,
                            Stock = 40,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("HotCatCafe.Model.Entities.Discount", null)
                        .WithMany("Orders")
                        .HasForeignKey("DiscountID");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
