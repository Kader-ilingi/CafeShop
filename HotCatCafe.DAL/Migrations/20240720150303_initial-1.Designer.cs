// <auto-generated />
using System;
using HotCatCafe.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotCatCafe.DAL.Migrations
{
    [DbContext(typeof(HotCatCafeContext))]
    [Migration("20240720150303_initial-1")]
    partial class initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc8c5788-f9ea-091c-f5f6-b5128dda81d1"),
                            AccessFailedCount = 0,
                            Address = "0225 Taurean Underpass, New Rollin, Virgin Islands, U.S.",
                            BirthDate = new DateTime(2003, 6, 17, 9, 20, 21, 171, DateTimeKind.Local).AddTicks(7375),
                            ConcurrencyStamp = "78e736b9-32c1-4bd7-a526-5613b1906a04",
                            Email = "ısai.dare_mayert@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "lgmxhYyE",
                            PhoneNumber = "(719) 614-6625",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Leann.Larson"
                        },
                        new
                        {
                            Id = new Guid("23f2811f-a80e-c428-f0ce-f34b98e61483"),
                            AccessFailedCount = 0,
                            Address = "05924 Destini Locks, Harveyton, Egypt",
                            BirthDate = new DateTime(2003, 4, 6, 11, 58, 22, 439, DateTimeKind.Local).AddTicks(7276),
                            ConcurrencyStamp = "f4551e45-3fce-4205-9f71-49d27ae9f723",
                            Email = "maida.lehner86@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "pmgUoTh9",
                            PhoneNumber = "1-264-877-5870 x6299",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Cheyanne_Leuschke36"
                        },
                        new
                        {
                            Id = new Guid("ee38c13e-9634-02df-0e7f-214e65fa0287"),
                            AccessFailedCount = 0,
                            Address = "645 Mertz Burg, Cartwrightshire, Denmark",
                            BirthDate = new DateTime(1988, 8, 20, 3, 19, 52, 442, DateTimeKind.Local).AddTicks(179),
                            ConcurrencyStamp = "45143dbc-3fad-4f62-af0c-dec02baf89fd",
                            Email = "frankie.mraz.rau@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "dh0Xvxfk",
                            PhoneNumber = "547-817-9244 x025",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Lavon.Glover"
                        },
                        new
                        {
                            Id = new Guid("84f3c1f7-28e4-0f6a-4ec8-c53bc9e38f33"),
                            AccessFailedCount = 0,
                            Address = "7247 Celine Key, Grahammouth, Uruguay",
                            BirthDate = new DateTime(2005, 3, 15, 9, 46, 14, 706, DateTimeKind.Local).AddTicks(595),
                            ConcurrencyStamp = "039ed134-a7a6-4bc5-b39d-55457d8ce5ab",
                            Email = "pablo67.bins34@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "S4M7K8Ua",
                            PhoneNumber = "1-742-406-0353 x79372",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Adrain.Mohr35"
                        },
                        new
                        {
                            Id = new Guid("be02e853-4ab8-8c73-8cca-64cd2971a265"),
                            AccessFailedCount = 0,
                            Address = "605 Cornell Lodge, New Roosevelt, United Arab Emirates",
                            BirthDate = new DateTime(1978, 8, 5, 20, 32, 41, 509, DateTimeKind.Local).AddTicks(7860),
                            ConcurrencyStamp = "05acb753-e79c-48cb-9e84-74e04ec8af43",
                            Email = "sophia3_koelpin69@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "E5EePzeD",
                            PhoneNumber = "1-405-796-9276 x27269",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Rusty77"
                        },
                        new
                        {
                            Id = new Guid("34113781-91fa-c2d2-9454-85b7296d42bf"),
                            AccessFailedCount = 0,
                            Address = "27924 Juvenal Causeway, Schneiderview, Bolivia",
                            BirthDate = new DateTime(1980, 8, 5, 10, 20, 3, 497, DateTimeKind.Local).AddTicks(3471),
                            ConcurrencyStamp = "e47b9f26-2376-4001-8d6c-5c23178eb3e3",
                            Email = "don8390@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "_kKmirBJ",
                            PhoneNumber = "515.975.9695",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Wilburn58"
                        },
                        new
                        {
                            Id = new Guid("f331a2c8-3751-8369-870b-aed2174c945e"),
                            AccessFailedCount = 0,
                            Address = "428 Kozey Fort, Sporerberg, Netherlands Antilles",
                            BirthDate = new DateTime(1985, 11, 16, 4, 38, 3, 86, DateTimeKind.Local).AddTicks(6981),
                            ConcurrencyStamp = "04861a8a-1d9c-4098-bf16-3fd5b6dcc3c9",
                            Email = "pattie55_oreilly18@gmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "sjHIqK2e",
                            PhoneNumber = "1-217-492-1112",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Teagan_Armstrong9"
                        },
                        new
                        {
                            Id = new Guid("b63e89f0-2b11-b989-c704-f3989a5d5bf8"),
                            AccessFailedCount = 0,
                            Address = "76408 Kshlerin Squares, New Ibrahim, Guyana",
                            BirthDate = new DateTime(1985, 9, 3, 3, 36, 6, 355, DateTimeKind.Local).AddTicks(3830),
                            ConcurrencyStamp = "8d30eddd-3561-4a69-8ac2-abf59e8062e7",
                            Email = "raegan22.emard@gmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "CFq_ImOS",
                            PhoneNumber = "1-427-884-8482 x86248",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Annabelle.Homenick"
                        },
                        new
                        {
                            Id = new Guid("6873295c-1b4b-3da6-aa0e-3e20280c77b5"),
                            AccessFailedCount = 0,
                            Address = "914 Emard Brooks, Glenstad, Turks and Caicos Islands",
                            BirthDate = new DateTime(1998, 11, 18, 6, 39, 49, 399, DateTimeKind.Local).AddTicks(9906),
                            ConcurrencyStamp = "66d45507-a7be-4fa5-82f8-d890f722e7d2",
                            Email = "emelia55_reinger92@gmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "a8puUH7E",
                            PhoneNumber = "(340) 903-5123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kellen47"
                        },
                        new
                        {
                            Id = new Guid("0c600817-3788-77ec-e153-e8bda17676f6"),
                            AccessFailedCount = 0,
                            Address = "13093 Schmitt Highway, North Alyceville, Christmas Island",
                            BirthDate = new DateTime(1981, 7, 18, 21, 51, 7, 543, DateTimeKind.Local).AddTicks(3124),
                            ConcurrencyStamp = "bf75fa85-a6f1-465d-86bd-a032feea86c8",
                            Email = "larissa77.anderson@gmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "RvjP_14O",
                            PhoneNumber = "601.337.4772 x8813",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Stan.Kirlin"
                        },
                        new
                        {
                            Id = new Guid("1dd2393a-d3f8-3c83-aeb4-02d6046658e3"),
                            AccessFailedCount = 0,
                            Address = "3702 Ike Pass, Corkeryfurt, Dominican Republic",
                            BirthDate = new DateTime(1989, 9, 12, 2, 55, 4, 883, DateTimeKind.Local).AddTicks(8918),
                            ConcurrencyStamp = "701d2269-f64e-4d4f-b8d5-8582ed7d04b4",
                            Email = "jerod.hermiston4221@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "fC1ivnON",
                            PhoneNumber = "1-282-538-4350",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Frankie.Goodwin"
                        },
                        new
                        {
                            Id = new Guid("0ff3a9eb-f963-9013-8b4e-1011f7104a2d"),
                            AccessFailedCount = 0,
                            Address = "0617 Kovacek Drives, Kuhicside, Turks and Caicos Islands",
                            BirthDate = new DateTime(1997, 1, 27, 9, 26, 46, 327, DateTimeKind.Local).AddTicks(9913),
                            ConcurrencyStamp = "c01089d5-9990-48b5-afc1-20ed11b4ea98",
                            Email = "pedro.strosin9@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "me3hcgiO",
                            PhoneNumber = "793-500-3756",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Hulda52"
                        },
                        new
                        {
                            Id = new Guid("b0a863f3-94d5-726f-5ee4-91e29a4ffe07"),
                            AccessFailedCount = 0,
                            Address = "5037 Jewel Ferry, Port Tomas, Georgia",
                            BirthDate = new DateTime(1988, 3, 20, 3, 35, 45, 667, DateTimeKind.Local).AddTicks(5959),
                            ConcurrencyStamp = "9d6af978-4df5-428b-8d95-7d2c718f3d70",
                            Email = "zackery34_wehner63@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "V6yU5Yx_",
                            PhoneNumber = "596.897.1937 x69068",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Reece81"
                        },
                        new
                        {
                            Id = new Guid("c1085048-07b9-005e-7d7a-2f52be5aa836"),
                            AccessFailedCount = 0,
                            Address = "592 Daniella Freeway, South Lorenview, Chad",
                            BirthDate = new DateTime(2003, 5, 3, 17, 41, 35, 131, DateTimeKind.Local).AddTicks(610),
                            ConcurrencyStamp = "d18a5a1b-6d50-49cd-ad00-38be816362c7",
                            Email = "faustino97.boyle@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "VbgHhRbI",
                            PhoneNumber = "564-855-2904",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ned_Mayer67"
                        },
                        new
                        {
                            Id = new Guid("f675fdcb-be13-5729-fb1e-381a95903a25"),
                            AccessFailedCount = 0,
                            Address = "570 Corwin Drives, Erwinfort, Tokelau",
                            BirthDate = new DateTime(1977, 9, 19, 3, 39, 24, 119, DateTimeKind.Local).AddTicks(77),
                            ConcurrencyStamp = "4f166a89-6fdd-4dce-999f-84dbeee6b744",
                            Email = "felix.doyle21.flatley@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "PTTInNIK",
                            PhoneNumber = "610.998.6129 x1645",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ron76"
                        },
                        new
                        {
                            Id = new Guid("95354688-ac81-0c2b-720c-e653e3a6f10d"),
                            AccessFailedCount = 0,
                            Address = "6160 Nona Streets, East Oceaneshire, Estonia",
                            BirthDate = new DateTime(1977, 6, 8, 22, 27, 57, 200, DateTimeKind.Local).AddTicks(2919),
                            ConcurrencyStamp = "cbfc7fc9-5fdc-4b8d-a844-ec75a41e8a30",
                            Email = "genesis.altenwerth_hansen@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "AFsCYnft",
                            PhoneNumber = "262-608-6701 x58403",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Alford.McKenzie"
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Desserts",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(5908),
                            CreatedIpAddress = 2,
                            Description = "Veniam vitae dolores totam in qui consectetur doloribus aspernatur reprehenderit.",
                            IsActive = true,
                            MasterId = new Guid("489402f0-ec54-4d08-9d9b-d60fa850e347"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Desserts",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6224),
                            CreatedIpAddress = 2,
                            Description = "Praesentium sunt eos alias et laudantium et et.",
                            IsActive = true,
                            MasterId = new Guid("97c4ce5e-3bfd-422d-9736-e25715739049"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6310),
                            CreatedIpAddress = 2,
                            Description = "Labore minus beatae iusto tenetur omnis est libero ipsa ex.",
                            IsActive = true,
                            MasterId = new Guid("871196f1-9feb-485a-a0b3-041269050595"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Snacks",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6353),
                            CreatedIpAddress = 2,
                            Description = "Animi earum quaerat est aspernatur non ut debitis.",
                            IsActive = true,
                            MasterId = new Guid("cb03cf6b-4850-4774-b681-b57e6073a287"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Ice Creams",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6384),
                            CreatedIpAddress = 2,
                            Description = "Vel in sint non maiores aliquid ut.",
                            IsActive = true,
                            MasterId = new Guid("b23067c2-d2b3-430f-b31f-25f6903d3089"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Cakes",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6414),
                            CreatedIpAddress = 2,
                            Description = "Non sint beatae deleniti soluta dicta.",
                            IsActive = true,
                            MasterId = new Guid("63236bfd-3fe6-4892-af6d-684a41eff635"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Sandwiches",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6435),
                            CreatedIpAddress = 2,
                            Description = "Commodi tenetur et quibusdam laudantium.",
                            IsActive = true,
                            MasterId = new Guid("72a167d9-f07b-493b-8e81-9ce98e65a054"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6453),
                            CreatedIpAddress = 2,
                            Description = "Et molestiae maiores accusamus voluptatem quidem aliquid consequatur quis.",
                            IsActive = true,
                            MasterId = new Guid("ec028b98-73c8-4e52-886d-73880e8fb619"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Fruit Juices",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6499),
                            CreatedIpAddress = 2,
                            Description = "Alias earum ratione pariatur ex sed.",
                            IsActive = true,
                            MasterId = new Guid("40e9d26a-35dc-4f69-925d-bcd67c375b97"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Cakes",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6565),
                            CreatedIpAddress = 2,
                            Description = "Ut qui est architecto voluptas laudantium ea ducimus eum earum.",
                            IsActive = true,
                            MasterId = new Guid("66f4e690-4c44-4ac7-aa82-08a2b34619b2"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6596),
                            CreatedIpAddress = 2,
                            Description = "Non qui numquam.",
                            IsActive = true,
                            MasterId = new Guid("cfbfaacd-5157-425b-9641-2eef3261565c"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6610),
                            CreatedIpAddress = 2,
                            Description = "Nobis aut aut rerum est qui veritatis.",
                            IsActive = true,
                            MasterId = new Guid("68dd0958-121f-455d-aedc-076bb199d064"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryName = "Coffees",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6637),
                            CreatedIpAddress = 2,
                            Description = "Rerum rerum a dolor.",
                            IsActive = true,
                            MasterId = new Guid("dd01e3d8-bc20-44eb-91ac-36be05812039"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryName = "Teas",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6655),
                            CreatedIpAddress = 2,
                            Description = "Reprehenderit quo eveniet sint cumque eius dicta.",
                            IsActive = true,
                            MasterId = new Guid("cd4b51ed-3139-4e22-9951-56bb3c917c04"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 79, DateTimeKind.Local).AddTicks(6678),
                            CreatedIpAddress = 2,
                            Description = "Nisi qui ullam animi similique delectus similique et deserunt.",
                            IsActive = true,
                            MasterId = new Guid("8b47ce8c-bc6f-4522-b6d2-46d13a6ab21f"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DiscountID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 86, DateTimeKind.Local).AddTicks(3146),
                            CreatedIpAddress = 2,
                            IsActive = true,
                            MasterId = new Guid("22d6baa2-74eb-41b4-a01a-3427cbaef26d"),
                            OrderDate = new DateTime(2024, 7, 20, 18, 3, 3, 86, DateTimeKind.Local).AddTicks(3193),
                            Status = 0,
                            TotalAmount = 100.00m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Discontinued")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Stock")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(7862),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.029999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=883",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("e90e59b0-29c9-4fe0-8f8e-2fde6c5d18cb"),
                            Price = 213.79m,
                            ProductName = "Coffee Soda",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)56,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryId = 4,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8119),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.14000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=429",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("206e5f84-3301-428a-8a71-99dd2c0d5141"),
                            Price = 72.52m,
                            ProductName = "Macchiato",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)9,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryId = 9,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8135),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.040000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=1056",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("a87ee31a-95f2-48cf-ac73-837c99309750"),
                            Price = 720.50m,
                            ProductName = "Americano",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)20,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8147),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.070000000000000007,
                            ImagePath = "https://picsum.photos/640/480/?image=849",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("d575756a-cc5d-4279-9785-43281fa1e495"),
                            Price = 155.76m,
                            ProductName = "Frappé",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)89,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8156),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.17000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=1010",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("78f22eb1-fdf8-4bc7-b7a7-14a77bb5bc62"),
                            Price = 879.26m,
                            ProductName = "Coffee Martini",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)79,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8166),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.01,
                            ImagePath = "https://picsum.photos/640/480/?image=570",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("7d31fba4-4f2f-4ae8-a75b-7f6f9b3d7e8a"),
                            Price = 524.63m,
                            ProductName = "Tiramisu",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)16,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8176),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.14000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=638",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("f8bacd30-d36e-4961-bdd9-1f3dc289125e"),
                            Price = 742.61m,
                            ProductName = "Trifle",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)40,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8184),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.059999999999999998,
                            ImagePath = "https://picsum.photos/640/480/?image=169",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("6db94e90-0c8b-450e-a072-99c3d7b8d16a"),
                            Price = 858.16m,
                            ProductName = "Cheesecake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryId = 6,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8193),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.17000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=698",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("52b8b81e-1b28-4653-8f57-ddcbff7801de"),
                            Price = 11.90m,
                            ProductName = "Cheesecake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)31,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8206),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.14999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=861",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("84934e95-8eee-40d2-9c33-60c3b1779dc9"),
                            Price = 814.74m,
                            ProductName = "Fruit Salad",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)48,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8243),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.34000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=905",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("f5044f38-a1ca-47df-9584-4051b98246ab"),
                            Price = 498.07m,
                            ProductName = "Brownie",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)70,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryId = 4,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8253),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.40000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=314",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("0e4546ea-ac16-45fc-835c-a13e2579d7d4"),
                            Price = 759.29m,
                            ProductName = "Brownie",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8262),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.31,
                            ImagePath = "https://picsum.photos/640/480/?image=1006",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("6972aaa0-ea22-4db9-aeff-00e15992532e"),
                            Price = 535.98m,
                            ProductName = "Americano",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)54,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8271),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.02,
                            ImagePath = "https://picsum.photos/640/480/?image=231",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("b1dccabe-081d-43a3-a839-5eda889e4477"),
                            Price = 33.61m,
                            ProductName = "Turkish Coffee",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)74,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8280),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.17000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=173",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("71f5f8d2-2343-4bc4-a644-5b70cb349275"),
                            Price = 73.90m,
                            ProductName = "Macaron",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)33,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 16,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8290),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.32000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=53",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("8b8d0271-8eda-44d8-ad96-421a52afff58"),
                            Price = 66.18m,
                            ProductName = "Cold Brew",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)34,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 17,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8299),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.11,
                            ImagePath = "https://picsum.photos/640/480/?image=658",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("97f50c13-9a92-4d0b-bafb-5d21ec822a4b"),
                            Price = 95.56m,
                            ProductName = "Cake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)78,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 18,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8311),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.45000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=605",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("f9d7a168-cf9a-436d-839d-ed7d74b73914"),
                            Price = 464.55m,
                            ProductName = "Trifle",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)10,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 19,
                            CategoryId = 6,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8320),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.27000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=926",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("aa2a5596-7685-4c64-8a72-450f3cba9cfd"),
                            Price = 408.73m,
                            ProductName = "Cold Brew",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)75,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 20,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 20, 18, 3, 3, 81, DateTimeKind.Local).AddTicks(8329),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.070000000000000007,
                            ImagePath = "https://picsum.photos/640/480/?image=142",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("4747dbb1-69fa-4c75-97a2-e03a29db1700"),
                            Price = 800.44m,
                            ProductName = "Cappuccino",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)73,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("HotCatCafe.Model.Entities.Discount", null)
                        .WithMany("Orders")
                        .HasForeignKey("DiscountID");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
