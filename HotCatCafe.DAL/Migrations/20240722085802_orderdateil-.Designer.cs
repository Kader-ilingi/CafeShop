// <auto-generated />
using System;
using HotCatCafe.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotCatCafe.DAL.Migrations
{
    [DbContext(typeof(HotCatCafeContext))]
    [Migration("20240722085802_orderdateil-")]
    partial class orderdateil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("34b8baeb-90d2-65a5-9f7d-b8d51c32e598"),
                            AccessFailedCount = 0,
                            Address = "56495 Quigley Springs, Lake Velmaview, New Caledonia",
                            BirthDate = new DateTime(1996, 8, 2, 10, 2, 55, 779, DateTimeKind.Local).AddTicks(8378),
                            ConcurrencyStamp = "c1748e3e-8813-4ff5-84db-d1fdb8142f9b",
                            Email = "sheldon.toy_dicki1@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "ai9BvwYU",
                            PhoneNumber = "(839) 421-6979 x83487",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Rhianna_Cronin10"
                        },
                        new
                        {
                            Id = new Guid("c1f6a2fe-7b6f-dd8f-5c89-c9ce688ac94f"),
                            AccessFailedCount = 0,
                            Address = "73964 Benjamin Causeway, Koelpinchester, Cape Verde",
                            BirthDate = new DateTime(2001, 1, 28, 20, 23, 8, 395, DateTimeKind.Local).AddTicks(1472),
                            ConcurrencyStamp = "751f8621-f8e8-46c9-b8ab-17c5d35e3888",
                            Email = "linda.nitzsche60@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "OZeLneDE",
                            PhoneNumber = "598-771-3342 x745",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Larry.Lynch26"
                        },
                        new
                        {
                            Id = new Guid("bcc36900-cbcc-33d9-56ba-b14f3b3998ad"),
                            AccessFailedCount = 0,
                            Address = "587 Ankunding Spring, South Gerryfort, Vietnam",
                            BirthDate = new DateTime(1983, 3, 13, 15, 43, 3, 197, DateTimeKind.Local).AddTicks(2641),
                            ConcurrencyStamp = "934508d6-4e3b-4259-b2e5-15c7e6081fd4",
                            Email = "kyra.green45@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "as8h6sSY",
                            PhoneNumber = "(403) 499-1456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Keven.Emmerich"
                        },
                        new
                        {
                            Id = new Guid("0b55b5bf-cf31-290b-e607-f2d826b36524"),
                            AccessFailedCount = 0,
                            Address = "652 Eduardo Village, Waynestad, Bahamas",
                            BirthDate = new DateTime(1989, 4, 4, 7, 22, 36, 14, DateTimeKind.Local).AddTicks(7165),
                            ConcurrencyStamp = "08149602-7e71-4a8b-b0fb-ba26d787a9b9",
                            Email = "leif.pfeffer7215@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "FSHsNb7w",
                            PhoneNumber = "1-539-557-7697 x3861",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Delbert.Cummings"
                        },
                        new
                        {
                            Id = new Guid("53816cb6-227a-0e0e-8c47-d4c07db1c6fe"),
                            AccessFailedCount = 0,
                            Address = "934 Junius Lake, Corwinville, Guernsey",
                            BirthDate = new DateTime(1987, 12, 15, 5, 35, 0, 466, DateTimeKind.Local).AddTicks(3090),
                            ConcurrencyStamp = "ce07052c-84cd-48d8-bac4-dd76706752ad",
                            Email = "kendrick.thompson62.johnson@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "GLUUjLP6",
                            PhoneNumber = "339.499.9177",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Alexzander_Feil18"
                        },
                        new
                        {
                            Id = new Guid("402db502-0d0f-1060-a518-b2a38ca8284f"),
                            AccessFailedCount = 0,
                            Address = "7829 Abelardo Course, Lake Andrewberg, Isle of Man",
                            BirthDate = new DateTime(1977, 10, 17, 23, 0, 41, 161, DateTimeKind.Local).AddTicks(2813),
                            ConcurrencyStamp = "f49a453a-1833-4905-83a9-7b6f28e9f4a9",
                            Email = "yadira87.von@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "o8SJkkb4",
                            PhoneNumber = "747.630.9634 x2912",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "America_Walter"
                        },
                        new
                        {
                            Id = new Guid("f573315c-2886-ed76-26dd-ead324af36a0"),
                            AccessFailedCount = 0,
                            Address = "8856 Dewitt Light, South Hollie, United States of America",
                            BirthDate = new DateTime(1998, 11, 17, 16, 12, 12, 431, DateTimeKind.Local).AddTicks(3513),
                            ConcurrencyStamp = "19db1057-11f6-43a3-980b-41d229df6aec",
                            Email = "chelsea.keeling_runolfsdottir38@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "_wGojin5",
                            PhoneNumber = "1-573-622-3888 x3568",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kathryne_Stanton49"
                        },
                        new
                        {
                            Id = new Guid("b4f40006-7b22-d36b-0340-b6379a2cda07"),
                            AccessFailedCount = 0,
                            Address = "269 McDermott Crossing, Port Orrinburgh, Mauritania",
                            BirthDate = new DateTime(2002, 2, 4, 23, 41, 20, 653, DateTimeKind.Local).AddTicks(6487),
                            ConcurrencyStamp = "efb99988-e630-4545-9400-12dcc3d76838",
                            Email = "pamela7.oconner@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "_3uKJ7uT",
                            PhoneNumber = "1-437-831-0196 x22881",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Vella.Hickle"
                        },
                        new
                        {
                            Id = new Guid("23fdc4bb-a78c-e76c-b94b-2d11e81e25dd"),
                            AccessFailedCount = 0,
                            Address = "546 Altenwerth Ridge, Wilkinsonfurt, Western Sahara",
                            BirthDate = new DateTime(1997, 9, 24, 15, 31, 41, 556, DateTimeKind.Local).AddTicks(5064),
                            ConcurrencyStamp = "c9ed4544-0aff-4162-98ea-b2ab10e3f549",
                            Email = "milan.connelly1675@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "UtCk2z9k",
                            PhoneNumber = "(360) 778-8835 x68589",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kenneth.Swaniawski50"
                        },
                        new
                        {
                            Id = new Guid("65e42b15-67a6-eacd-4ecd-8fe4bfb95423"),
                            AccessFailedCount = 0,
                            Address = "7303 Sandra Greens, West Kurtfurt, Republic of Korea",
                            BirthDate = new DateTime(1992, 3, 2, 14, 37, 58, 338, DateTimeKind.Local).AddTicks(9849),
                            ConcurrencyStamp = "3ac7dcde-df4e-482a-ba97-ff6729ed978b",
                            Email = "hermina9541@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "AIEwGaPQ",
                            PhoneNumber = "(667) 862-3879 x50320",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Grace64"
                        },
                        new
                        {
                            Id = new Guid("28aa96c6-b5ab-2281-2d6b-ffda8118cbd4"),
                            AccessFailedCount = 0,
                            Address = "27994 Crystel Manors, Port Kellen, Singapore",
                            BirthDate = new DateTime(2005, 12, 28, 11, 56, 28, 885, DateTimeKind.Local).AddTicks(110),
                            ConcurrencyStamp = "fea15dae-b4cc-43b4-9917-8549efdb8275",
                            Email = "jeff1446@hotmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "ASqlisMf",
                            PhoneNumber = "(274) 355-8955 x98081",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Gregg.Ziemann"
                        },
                        new
                        {
                            Id = new Guid("c1add858-9f99-d4fb-ed7c-444ff682b0be"),
                            AccessFailedCount = 0,
                            Address = "8376 McLaughlin Prairie, South Ahmad, United States of America",
                            BirthDate = new DateTime(1986, 11, 24, 1, 56, 50, 624, DateTimeKind.Local).AddTicks(7141),
                            ConcurrencyStamp = "b6276640-3b7d-48d1-abea-25bb10db0ff5",
                            Email = "cassie6085@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "SQLPzOKO",
                            PhoneNumber = "(231) 382-6798 x49606",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Brody.Langosh28"
                        },
                        new
                        {
                            Id = new Guid("447c85c8-7675-ed79-b7ce-3644d48868bf"),
                            AccessFailedCount = 0,
                            Address = "55249 Kessler Fork, Purdyton, Cyprus",
                            BirthDate = new DateTime(1983, 3, 8, 10, 48, 57, 951, DateTimeKind.Local).AddTicks(9838),
                            ConcurrencyStamp = "217ceda8-d676-4789-86aa-cf0f88dbd32d",
                            Email = "ludie.white6.wisoky75@gmail.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "ellp6khw",
                            PhoneNumber = "1-348-450-6034",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Domingo.Kunze"
                        },
                        new
                        {
                            Id = new Guid("ca1e4265-3b1e-e976-8d64-9d41a598f40a"),
                            AccessFailedCount = 0,
                            Address = "69611 Mallie Harbors, Lake Savionburgh, Macao",
                            BirthDate = new DateTime(2000, 4, 14, 17, 45, 17, 389, DateTimeKind.Local).AddTicks(2309),
                            ConcurrencyStamp = "5eca1c5b-e4ec-4fb0-9b88-dd281be0ea50",
                            Email = "tyrique_douglas8_kessler@yahoo.com",
                            EmailConfirmed = false,
                            Gender = 2,
                            LockoutEnabled = false,
                            PasswordHash = "nQm9xluJ",
                            PhoneNumber = "680.387.3546 x3044",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Berry.Smitham81"
                        },
                        new
                        {
                            Id = new Guid("8d4b8c15-fa37-4857-fb3b-24061248a06a"),
                            AccessFailedCount = 0,
                            Address = "849 Ariel Loaf, West Kole, Italy",
                            BirthDate = new DateTime(2003, 9, 4, 3, 8, 9, 420, DateTimeKind.Local).AddTicks(2244),
                            ConcurrencyStamp = "adc5d860-7fff-4dc9-9db6-08202b4a8076",
                            Email = "jamar67.kunde24@gmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PasswordHash = "S_ES0Q5o",
                            PhoneNumber = "294-910-1926",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Elwin35"
                        },
                        new
                        {
                            Id = new Guid("76c1d0ed-7b9c-ddd0-1408-9823e6a97f13"),
                            AccessFailedCount = 0,
                            Address = "121 Milan Fall, Port Karlie, Uganda",
                            BirthDate = new DateTime(2000, 8, 11, 14, 51, 53, 136, DateTimeKind.Local).AddTicks(6531),
                            ConcurrencyStamp = "f196adf1-d2f4-4580-bf0d-454e4bee0f31",
                            Email = "chauncey.rippin5074@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PasswordHash = "xuLb2ppg",
                            PhoneNumber = "1-412-675-6182 x65252",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Cassidy49"
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Ice Creams",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1447),
                            CreatedIpAddress = 2,
                            Description = "Magni nesciunt odio qui molestiae nesciunt eum omnis quae.",
                            IsActive = true,
                            MasterId = new Guid("a9d10cd7-c68b-49b5-8aba-382edfdc5861"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Sandwiches",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1819),
                            CreatedIpAddress = 2,
                            Description = "Sint ut aut dignissimos provident.",
                            IsActive = true,
                            MasterId = new Guid("c3318e50-c77d-4acf-a644-9af0de5e8f76"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Ice Creams",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1847),
                            CreatedIpAddress = 2,
                            Description = "Numquam enim ut delectus quia.",
                            IsActive = true,
                            MasterId = new Guid("5906cace-756d-4a79-94da-116bcfcfb98e"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1871),
                            CreatedIpAddress = 2,
                            Description = "Ut architecto aut.",
                            IsActive = true,
                            MasterId = new Guid("a90a117f-6558-4ca1-9a7b-313b6a4ed238"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1888),
                            CreatedIpAddress = 2,
                            Description = "İn rerum ipsa.",
                            IsActive = true,
                            MasterId = new Guid("f48a4817-2818-48f2-ad9b-cf2b24dad499"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Salads",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1905),
                            CreatedIpAddress = 2,
                            Description = "Sequi et amet neque animi voluptatem.",
                            IsActive = true,
                            MasterId = new Guid("d61fee98-f9c4-4686-b6ad-f5773d19d694"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1929),
                            CreatedIpAddress = 2,
                            Description = "Dolor repudiandae facilis sunt nostrum id rerum nemo.",
                            IsActive = true,
                            MasterId = new Guid("973b7d6d-f4df-4276-8f15-1612ed24d4e7"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Fruit Juices",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1961),
                            CreatedIpAddress = 2,
                            Description = "Enim consequatur ea eos at velit aperiam iste quas.",
                            IsActive = true,
                            MasterId = new Guid("0d4e757e-4110-4c07-830a-7c64b94dd533"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Fruit Juices",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(1993),
                            CreatedIpAddress = 2,
                            Description = "Et non debitis saepe tenetur deleniti.",
                            IsActive = true,
                            MasterId = new Guid("892a6c91-32f8-4be5-a284-c012dbeea673"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2028),
                            CreatedIpAddress = 2,
                            Description = "Dolorum accusantium velit velit ullam.",
                            IsActive = true,
                            MasterId = new Guid("6d94d2c6-47f3-4831-8910-877224e28947"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            CategoryName = "Teas",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2075),
                            CreatedIpAddress = 2,
                            Description = "Asperiores nostrum quaerat.",
                            IsActive = true,
                            MasterId = new Guid("27db7d95-456a-4453-b08e-638ef95265bc"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryName = "Chocolates",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2091),
                            CreatedIpAddress = 2,
                            Description = "Minima amet tempore maxime nulla sit natus et sed exercitationem.",
                            IsActive = true,
                            MasterId = new Guid("b2d0fd2f-6d8d-4e0b-8e9b-7a60aedc5a92"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryName = "Cakes",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2121),
                            CreatedIpAddress = 2,
                            Description = "Occaecati aut dolore impedit aut laborum eum qui ullam.",
                            IsActive = true,
                            MasterId = new Guid("cc1924f5-6593-43b4-86dc-b6c494a11dd3"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryName = "Snacks",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2149),
                            CreatedIpAddress = 2,
                            Description = "Sint quis animi.",
                            IsActive = true,
                            MasterId = new Guid("095867cb-69a8-4fd7-a1c7-3aba115f979d"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryName = "Cakes",
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 449, DateTimeKind.Local).AddTicks(2164),
                            CreatedIpAddress = 2,
                            Description = "Doloremque quaerat doloribus veritatis saepe reprehenderit eligendi quisquam est.",
                            IsActive = true,
                            MasterId = new Guid("fc61ccd9-9067-4fa9-83da-7569e2eb8503"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DiscountID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 453, DateTimeKind.Local).AddTicks(7199),
                            CreatedIpAddress = 2,
                            IsActive = true,
                            MasterId = new Guid("cf8021e0-d358-4429-9df2-956f5641b6e1"),
                            OrderDate = new DateTime(2024, 7, 22, 11, 58, 1, 453, DateTimeKind.Local).AddTicks(7230),
                            Status = 0,
                            TotalAmount = 100.00m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<int>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Discontinued")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Stock")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(7835),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.47999999999999998,
                            ImagePath = "https://picsum.photos/640/480/?image=922",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("d426c01f-a929-4de1-aede-6f5b7bc6b90e"),
                            Price = 638.19m,
                            ProductName = "Cupcake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)10,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8044),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.02,
                            ImagePath = "https://picsum.photos/640/480/?image=404",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("57b97bfd-1dd8-4196-8ad5-3f5d5f9e0b4c"),
                            Price = 70.78m,
                            ProductName = "Turkish Coffee",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)42,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8062),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.080000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=615",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("d2446dc7-eb62-4369-ac54-53560ff00a85"),
                            Price = 925.64m,
                            ProductName = "Espresso",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)38,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8103),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.17000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=354",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("35a30263-ed06-48d9-9c4d-7f3140405642"),
                            Price = 886.87m,
                            ProductName = "Tiramisu",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)19,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8112),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.35999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=166",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("90dbb136-90ec-492c-90c7-de1b66cff30e"),
                            Price = 674.49m,
                            ProductName = "Cold Brew",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8122),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.080000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=1069",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("7e344b08-0cbd-4905-be78-b924620ffbfb"),
                            Price = 976.16m,
                            ProductName = "Cheesecake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)48,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            CategoryId = 5,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8130),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.12,
                            ImagePath = "https://picsum.photos/640/480/?image=824",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("ba9b3348-573e-469b-b475-3a3a4fa6cafc"),
                            Price = 971.90m,
                            ProductName = "Cappuccino",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)58,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            CategoryId = 1,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8139),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.13,
                            ImagePath = "https://picsum.photos/640/480/?image=310",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("e34bfec6-7d59-4c09-8862-b99f18a5bd1c"),
                            Price = 257.52m,
                            ProductName = "Mocha",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)18,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8147),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.42999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=928",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("56eff728-9f27-49f8-9522-6bddd147b2a2"),
                            Price = 213.67m,
                            ProductName = "Brownie",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)16,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8157),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.33000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=463",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("471c5bf7-d2e0-4135-a088-e79f4edfd8b8"),
                            Price = 657.78m,
                            ProductName = "Ice Cream",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)49,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8168),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.33000000000000002,
                            ImagePath = "https://picsum.photos/640/480/?image=395",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("94322016-3c18-4a7e-bc47-c1b8d22ad0ee"),
                            Price = 342.49m,
                            ProductName = "Coffee Soda",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)71,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryId = 4,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8176),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.47999999999999998,
                            ImagePath = "https://picsum.photos/640/480/?image=155",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("3d0216ed-b5aa-42c5-b39e-fecb24aa2d62"),
                            Price = 306.57m,
                            ProductName = "Pancake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)91,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryId = 3,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8186),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.42999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=775",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("b36a5b4f-1ff6-40c2-9d81-6f47b53439e8"),
                            Price = 351.87m,
                            ProductName = "Chocolate Fondue",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)41,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryId = 7,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8194),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.39000000000000001,
                            ImagePath = "https://picsum.photos/640/480/?image=839",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("64b07f13-1358-4f0b-baf3-0969834a3917"),
                            Price = 56.26m,
                            ProductName = "Donut",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)73,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryId = 8,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8224),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.070000000000000007,
                            ImagePath = "https://picsum.photos/640/480/?image=930",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("881cffa5-b2a9-4587-93c0-1428d3b69f01"),
                            Price = 948.75m,
                            ProductName = "Coffee Milkshake",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)72,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 16,
                            CategoryId = 2,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8233),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.12,
                            ImagePath = "https://picsum.photos/640/480/?image=773",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("5579a13f-39cd-47b8-acac-2bc464ba484d"),
                            Price = 209.51m,
                            ProductName = "Macaron",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)80,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 17,
                            CategoryId = 8,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8242),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.02,
                            ImagePath = "https://picsum.photos/640/480/?image=378",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("2abf96ca-eab2-468f-a851-0ff4b9cecf01"),
                            Price = 805.03m,
                            ProductName = "Éclair",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)24,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 18,
                            CategoryId = 10,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8252),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.48999999999999999,
                            ImagePath = "https://picsum.photos/640/480/?image=262",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("910bd2fa-9353-4fb2-8e86-761b8f68802e"),
                            Price = 954.81m,
                            ProductName = "Profiterole",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 19,
                            CategoryId = 5,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8262),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.12,
                            ImagePath = "https://picsum.photos/640/480/?image=256",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("b94227bf-ccd5-4170-958d-2b72c4749b66"),
                            Price = 254.48m,
                            ProductName = "Affogato",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)31,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 20,
                            CategoryId = 5,
                            CreatedComputerName = "LAPTOP-7RVI861P",
                            CreatedDate = new DateTime(2024, 7, 22, 11, 58, 1, 450, DateTimeKind.Local).AddTicks(8271),
                            CreatedIpAddress = 2,
                            DataSize = 0,
                            Discount = 0.44,
                            ImagePath = "https://picsum.photos/640/480/?image=679",
                            IsActive = true,
                            IsDiscontinued = false,
                            MasterId = new Guid("780b263d-4966-4372-b202-e888a047ea84"),
                            Price = 856.49m,
                            ProductName = "Macaron",
                            ProductStatus = 0,
                            Status = 0,
                            Stock = (short)54,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedIpAddress")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("HotCatCafe.Model.Entities.Discount", null)
                        .WithMany("Orders")
                        .HasForeignKey("DiscountID");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Review", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Shipment", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotCatCafe.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("HotCatCafe.Model.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
